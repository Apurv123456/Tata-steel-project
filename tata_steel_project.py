# -*- coding: utf-8 -*-
"""Tata steel intern

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cmrNUkL6pwl4CMuOfgPXXQCUr6sB-WD0
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

link = "/content/SS_dump_Jan-19thJune.xlsx"

df = pd.read_excel(link)

df

df.isnull().sum()

df.dropna(inplace=True)

df



df['Creation Date'] = pd.to_datetime(df['Creation Date'])

df['Date'] = df['Creation Date'].dt.date

df

start_date = pd.to_datetime('2024-01-1').date()
end_date = pd.to_datetime('2024-06-30').date()

data = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]

data

"""SOLUTION 1"""

new_data = data['Business duration']

new_data.isnull().sum()

new_data

"""Converting the seconds into days."""

new_data = new_data/86400

new_data

Average_resolution = new_data.mean()

print("Average resolution time ", {Average_resolution})

"""SOLUTION 2"""

data

required_columns = ['Assignment Group', 'Business duration']

column_data = data[required_columns]

column_data

column_data['business_days'] = column_data['Business duration']/86400

column_data

n_data = column_data.drop('Business duration', axis=1)

n_data

n_data['Assignment Group'].unique()

def categorize_days(days):
    if days < 3:
        return '<3 days'
    elif days <= 7:
        return '3-7 days'
    else:
        return '>7 days'

# Apply the categorization
n_data['days_category'] = n_data['business_days'].apply(categorize_days)

# List of company names
companies = n_data['Assignment Group'].unique()

# Plotting for each company
for company in companies:
    company_data = n_data[n_data['Assignment Group'] == company]
    count_data = company_data['days_category'].value_counts().reindex(['<3 days', '3-7 days', '>7 days'], fill_value=0)

    plt.figure(figsize=(6, 5))
    bar_width = 0.3
    plt.bar(count_data.index, count_data.values, width=bar_width, color=['blue', 'orange', 'green'])
    plt.xlabel('Service Time Category')
    plt.ylabel('Number of Tickets')
    plt.title(f'Service Time Distribution for {company}')
    plt.show()

n_data

"""SOLUTION 3"""

data

data











import nltk
nltk.download('punkt')

from nltk.tokenize import sent_tokenize

# Convert the Pandas Series to a single string
data1_string = ' '.join(data1.astype(str))

# Use the correct variable name 'data3_string'
tokenized_sent = sent_tokenize(data1_string)
print(tokenized_sent)

from nltk import word_tokenize

tokenized_words = []
for sentence in tokenized_sent:
    tokenized_words.extend(word_tokenize(sentence))  # Tokenize each sentence and extend the list

print(tokenized_words)

from nltk.probability import FreqDist

freq_dist = FreqDist(tokenized_words)
print(freq_dist)

freq_dist.most_common(10)

import matplotlib.pyplot as plt
freq_dist.plot(30, cumulative=False)
plt.show()

nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words=set(stopwords.words('english'))
print(stop_words)

filtered_sent = []
for w in tokenized_words:
    if w not in stop_words:
      filtered_sent.append(w)
print(filtered_sent)

from nltk.stem import PorterStemmer
from nltk.tokenize import sent_tokenize, word_tokenize
stemmer = PorterStemmer()
stemmed_words = []
for word in filtered_sent:
    stemmed_words.append(stemmer.stem(word))
print(stemmed_words)

a_data = pd.DataFrame(data1)



electrical_keywords = ['power', 'voltage', 'current', 'electric', 'circuit', 'breaker', 'outage','electrical']
network_keywords = ['network', 'connectivity', 'internet', 'IP', 'router', 'switch', 'bandwidth', 'rj', '45', 'connector', 'media', 'convertor', 'fiber', 'patch', 'link', 'connect']
faulty_device_keywords = ['camera', 'sensor', 'device', 'hardware', 'malfunction', 'failure', 'defect','hang', 'loos', 'faulti', 'reboot', 'onlin', 'pmt', 'initi']

# Function to categorize the cause
def categorize_cause(Cause):
    cause_lower = Cause.lower()
    if any(keyword in cause_lower for keyword in electrical_keywords):
        return 'Electrical Problem'
    elif any(keyword in cause_lower for keyword in network_keywords):
        return 'Network Problem'
    elif any(keyword in cause_lower for keyword in faulty_device_keywords):
        return 'Faulty Device'


# Apply the function to the 'causes' column
a_data['Category'] = a_data['Cause'].apply(categorize_cause)

# Save the updated DataFrame to a new CSV file
a_data.to_csv('categorized_surveillance_issues.csv', index=False)

# Display the first few rows of the updated DataFrame
print(a_data.head())



category_counts = a_data['Category'].value_counts()

# Plot the data
plt.figure(figsize=(10, 6))
category_counts.plot(kind='bar', color=['blue', 'orange', 'green', 'red'])
plt.title('Distribution of Surveillance System Issues')
plt.xlabel('Category')
plt.ylabel('Number of Issues')
plt.xticks(rotation=45)
plt.show()





